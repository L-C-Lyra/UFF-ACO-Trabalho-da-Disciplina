# control_unit.py

from helpers import to_short
from hardware_components import MUX, MSL
from memory import Memory

class ControlUnit:
    def __init__(self):
        self.control_memory = ["00000000110000000000000000000000", "00000000010100000000011000000000", 
                               "10110000000100110000000000011100", "00100100000101000011001100010011", 
                               "00110100000101000000010000001011", "00110000000000000000010000001001", 
                               "00000000110000000011000000000000", "00000000010000000000000000000000", 
                               "11110000000100010000000000000000", "00010001101000000011000100000000", 
                               "01100000001000000000000000000000", "00110000000000000000010000001111", 
                               "00000000110000000011000000000000", "00000000010000000000000000000000", 
                               "11100000000100010001000000000000", "00000000110000000011000000000000", 
                               "00000000010100010001011000000000", "10011000000110100000000000000000", 
                               "01100000000100010001101000000000", "00110100000101000000010000011001", 
                               "00110000000000000000010000010111", "00110000000000000000000100000000", 
                               "01101000000100000011100000000000", "01010000000000000000000100010110", 
                               "01100000000000000000000000000000", "00110000000000000000010000011011", 
                               "01101000000100000011100000000000", "01101000000100010011100000000000", 
                               "00100100000101000011001100101000", "00110100000101000000010000100011", 
                               "00110000000000000000010000100001", "00000000000110100011001000000000", 
                               "01100000110000001010000000000111", "00000000000110100011001000000000", 
                               "01110001101000001010000100001010", "00110000000000000000010000100110", 
                               "00000000000110100011001000000000", "01100000110000001010000000001101", 
                               "00000000000110100011001000000000", "01100000110000001010000000010000", 
                               "00110100000101000000010000101110", "00110000000000000000010000101100", 
                               "00110000000000000000000100010110", "01100000000000000000000000000000", 
                               "01010000000000000000000100000000", "01101000000100000011100000000000", 
                               "00110100000101000000010000110010", "00000000000100100010011100000000", 
                               "00010001101000000010000000000000", "01101000001100000011100000000000", 
                               "00110100000101000000010001000001", "00110100000101000000010000111011", 
                               "00000000110000000001000000000000", "00000000010100100010011100000000", 
                               "01100000101000000010000000001010", "00000000110100100010011000000000", 
                               "00000000010000000000000000000000", "01100000101000000001000000001010", 
                               "00110000000000000000010000111110", "00000000000100100010011100000000", 
                               "01110001101000000010000100001010", "00000000110100100010011000000000", 
                               "00000000010000000000000000000000", "11110000000100010000000000000000", 
                               "00110100000101000000010001001001", "00110000000000000000010001000110", 
                               "00000000110100100010011000000000", "00000000010000000000000000000000", 
                               "11110000000100000000000000000000", "00010000000110100000000100000000", 
                               "00010000000100010000001000000000", "01110000000100100000101000000000", 
                               "00110000000000000000010001001100", "00001000000110100011100100000000", 
                               "01100000000100100010101000000000", "00001000000110100011100100000000", 
                               "00011000000110100000101000000000", "01100000000110101010011001001011"]
        self.mmux = MUX()
        self.msl = MSL()
        self.mpc = 0
        self.mir = ""
        self.n_bit = False
        self.z_bit = False
        self.reset_signals()

    def reset_signals(self):
        self.amux_control = False; self.cond_control = 0; self.alu_control = 0;
        self.sh_control = 0; self.mbr_control = False; self.mar_control = False;
        self.rd_control = False; self.wr_control = False; self.enc_control = False;
        self.c_control = 0; self.b_control = 0; self.a_control = 0; self.next_address = 0

    def run_first_subcycle(self):
        self.mir = self.control_memory[self.mpc]

    def run_second_subcycle(self):
        self.b_control = int(self.mir[16:20], 2)
        self.a_control = int(self.mir[20:24], 2)
        self.mpc += 1

    def run_third_subcycle(self):
        self.amux_control = self.mir[0] == '1'
        self.alu_control = int(self.mir[3:5], 2)
        self.sh_control = int(self.mir[5:7], 2)
        self.mar_control = self.mir[8] == '1'

    def run_fourth_subcycle(self):
        self.mbr_control = self.mir[7] == '1'; self.enc_control = self.mir[11] == '1'
        self.c_control = int(self.mir[12:16], 2); self.cond_control = int(self.mir[1:3], 2)
        self.next_address = int(self.mir[24:32], 2)
        self.msl.generate_output(self.cond_control, self.n_bit, self.z_bit)
        self.mmux.decide_output(self.msl.output, self.mpc, self.next_address)
        self.mpc = to_short(self.mmux.output)
        self.rd_control = self.mir[9] == '1'; self.wr_control = self.mir[10] == '1'
        if self.rd_control: Memory.increment_read_counter()
        if self.wr_control: Memory.increment_write_counter()
